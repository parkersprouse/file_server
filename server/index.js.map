{
  "version": 3,
  "sources": ["../index.js", "../config.js", "../routes/assets.js", "../routes/files.js", "../lib/index.js", "../routes/not_found.js"],
  "sourcesContent": ["import fs from 'fs';\nimport path from 'path';\nimport Hapi from '@hapi/hapi';\nimport inert from '@hapi/inert';\nimport vision from '@hapi/vision';\nimport handlebars from 'handlebars';\nimport qs from 'qs';\nimport config from './config.js';\nimport assets_route from './routes/assets.js';\nimport files_route from './routes/files.js';\nimport not_found_route from './routes/not_found.js';\n\nasync function init() {\n  const root_path = config.file_source;\n  if (!root_path) throw 'No file source path provided';\n  if (!fs.existsSync(root_path) || !fs.statSync(root_path).isDirectory()) {\n    throw 'Invalid file source path provided';\n  }\n\n  handlebars.registerHelper('ifEquals', function(arg1, arg2, options) {\n    return (arg1 == arg2) ? options.fn(this) : options.inverse(this);\n  });\n\n  const __dirname = path.resolve('.');\n  const server = Hapi.server({\n    app: {\n      __dirname,\n      config,\n      root_path,\n    },\n    port: config.port,\n    host: config.host,\n    router: {\n      stripTrailingSlash: true,\n    },\n    routes: {\n      files: {\n        relativeTo: root_path,\n      },\n    },\n    query: {\n      parser: (query) => qs.parse(query),\n    },\n  });\n\n  await server.register(inert);\n  await server.register(vision);\n\n  server.views({\n    engines: {\n      html: handlebars,\n    },\n    relativeTo: __dirname,\n    path: path.join(__dirname, 'server', 'templates'),\n    partialsPath: path.join(__dirname, 'server', 'templates', 'partials'),\n  });\n\n  server.ext('onRequest', (request, h) => {\n    if (request.path === '/') request.setUrl('/f');\n    return h.continue;\n  });\n\n  // Attempt to get the requested file from the file system\n  server.route(files_route);\n\n  // Respond with any requested assets\n  server.route(assets_route);\n\n  // Anything non-GET is immediately a 404\n  server.route(not_found_route);\n\n  await server.start();\n  console.log('Server running on %s', server.info.uri);\n}\n\nprocess.on('unhandledRejection', (err) => {\n  console.error(err);\n  process.exit(1);\n});\n\ninit();\n", "import dotenv from 'dotenv';\ndotenv.config();\n\nexport default {\n  file_source: process.argv[2] || process.env.FILE_SERVER_FILES_SOURCE,\n  host: process.env.FILE_SERVER_HOST || '0.0.0.0',\n  port: process.env.FILE_SERVER_PORT || 3000,\n};\n", "import path from 'path';\n\n/**\n * GET /assets/*\n */\nexport default {\n  method: 'GET',\n  path: '/{any*}',\n  handler: function (request, h) {\n    try {\n      return h.file(path.join(h.request.server.settings.app.__dirname, 'server', request.path), { confine: false });\n    } catch (e) {\n      return h.view('404').code(404);\n    }\n  },\n};\n", "import fs from 'fs';\nimport path from 'path';\nimport { fileTypeFromFile } from 'file-type';\nimport qs from 'qs';\nimport {\n  atRoot,\n  formatDuration,\n  formatLastUpdated,\n  generateUrl,\n  getLastUpdated,\n  getDuration,\n  toQuery,\n  sortEntries,\n  strip,\n  toBreadcrumbs,\n} from '../lib/index.js';\n\nconst valid_views = Object.freeze(['list', 'grid']);\nconst valid_sorts = Object.freeze(['name', 'duration', 'last_updated']);\n\n/**\n * @param {RequestObject} request - The request object sent to the server.\n * @param {Object} h - The Hapi server instance.\n * @param {String} root_path - The absolute system path to the root directory being served.\n * @param {String} local_path - The absolute system path to the directory.\n * @param {String} req_path - The URL path being requested.\n * @returns {ResponseObject}\n */\nasync function handleDirectory(request, h, root_path, local_path, req_path) {\n  const view_param = valid_views.includes(request.query.view?.toLowerCase()) ? request.query.view.toLowerCase() : 'list';\n  const sort_param = valid_sorts.includes(request.query.sort?.toLowerCase()) ? request.query.sort.toLowerCase() : 'name';\n\n  const files = fs.readdirSync(local_path, { withFileTypes: true });\n\n  // We don't want to serve any directories under our thumbnail folder\n  if (req_path.startsWith('/.thumbnails')) return h.view('404').code(404);\n\n  let parsed = [];\n  for (let i = 0; i < files.length; i += 1) {\n    const f = files[i];\n    const dir = f.isDirectory();\n\n    // We don't want the thumbnail folder to be listed\n    if (f.name === '.thumbnails') continue;\n\n    const encoded_name = encodeURIComponent(f.name);\n    const encoded_local_path = path.join(local_path, encoded_name);\n    const encoded_root_path = path.relative(root_path, encoded_local_path);\n\n    const file_path = path.join(local_path, f.name);\n    const last_updated = getLastUpdated(file_path);\n    const output = {\n      icon: dir ? 'ri-folder-fill' : 'ri-file-line',\n      last_updated: formatLastUpdated(last_updated),\n      name: f.name,\n      path: `/f/${strip(encoded_root_path)}${toQuery(request.query)}`,\n      raw_last_updated: last_updated,\n      type: dir ? 'folder' : 'file',\n    };\n\n    if (!dir) {\n      const determined_type = await fileTypeFromFile(file_path);\n      if (determined_type?.mime?.startsWith('image')) {\n        output.icon = 'ri-image-2-line';\n        output.type = 'image';\n        if (view_param === 'grid') output.src = `/f/${strip(req_path)}/${f.name}`;\n      } else if (determined_type?.mime?.startsWith('video')) {\n        output.icon = 'ri-film-line';\n        output.type = 'video';\n\n        const dur = await getDuration(file_path);\n        output.duration = formatDuration(dur);\n        output.raw_duration = dur;\n\n        const thumbnail_file = f.name.replace(path.extname(f.name), '.png');\n        const thumbnail_path = path.join(root_path, '.thumbnails', req_path, thumbnail_file);\n        if (fs.existsSync(thumbnail_path)) {\n          output.thumbnail = `/f/.thumbnails/${strip(req_path)}/${strip(encodeURIComponent(thumbnail_file))}`;\n        }\n      } else if (determined_type?.mime?.startsWith('audio')) {\n        output.icon = 'ri-headphone-line';\n        output.type = 'audio';\n\n        const dur = await getDuration(file_path);\n        output.duration = formatDuration(dur);\n        output.raw_duration = dur;\n      }\n\n      if (file_path.toLowerCase().endsWith('.url')) {\n        output.icon = 'ri-external-link-line';\n        fs.readFileSync(file_path).toString('utf8').split('\\n').forEach((line) => {\n          if (line.trim().startsWith('URL=')) output.external_url = line.split('=')[1];\n        });\n      }\n    }\n\n    parsed.push(output);\n  }\n  parsed = sortEntries(parsed, sort_param);\n\n  const query = qs.stringify(request.query);\n  const breadcrumbs = toBreadcrumbs(req_path, query);\n\n  return h.view('page', {\n    at_root: atRoot(req_path),\n    breadcrumbs,\n    duration_sort_url: generateUrl(req_path, request.query, 'sort', 'duration'),\n    files: parsed,\n    grid_view_url: generateUrl(req_path, request.query, 'view', 'grid'),\n    last_updated_sort_url: generateUrl(req_path, request.query, 'sort', 'last_updated'),\n    list_view_url: generateUrl(req_path, request.query, 'view', 'list'),\n    name_sort_url: generateUrl(req_path, request.query, 'sort', 'name'),\n    root_url: `/f${toQuery(query)}`,\n    sort_param,\n    view_param,\n  });\n}\n\n/**\n * @param {Object} h - The Hapi server instance.\n * @param {String} local_path - The absolute system path to the file.\n * @returns {ResponseObject}\n */\nfunction handleFile(h, local_path) {\n  return h.file(local_path, { confine: false, mode: 'inline', etagMethod: 'simple' }).code(200);\n}\n\n/**\n * GET /*\n */\nexport default {\n  method: 'GET',\n  path: '/f/{any*}',\n  handler: function (request, h) {\n    try {\n      const { root_path } = h.request.server.settings.app;\n      const req_path = decodeURIComponent(request.path).replace(/^\\/f/, '').replace(/\\/+/g, '/') || '/';\n      const local_path = path.join(root_path, req_path);\n      const stats = fs.statSync(local_path);\n      if (stats.isDirectory()) return handleDirectory(request, h, root_path, local_path, req_path);\n      if (stats.isFile()) return handleFile(h, local_path);\n      return h.view('404').code(404);\n    } catch (e) {\n      return h.view('404').code(404);\n    }\n  },\n};\n", "import fs from 'fs';\nimport { execa } from 'execa';\nimport ffprobe from '@ffprobe-installer/ffprobe';\nimport { cloneDeep, isEmpty, orderBy, without } from 'lodash-es';\nimport qs from 'qs';\n\nexport function atRoot(path) {\n  return path === '/' || path === '/f';\n}\n\n/**\n * Returns a promise that will be resolved with the duration of given video in seconds.\n * @param {String} input - Stream or URL or path to file to be used as input for `ffprobe`.\n * @returns {Promise} - A `child_process` instance, which is enhanced to also be a `Promise`\n *   for a result Object with stdout and stderr properties.\n */\nfunction executeProbe(input) {\n  const params = ['-v', 'error', '-show_format', '-show_streams'];\n  if (typeof input === 'string') return execa(ffprobe.path, [...params, input]);\n  throw new Error('Given input was not a string');\n}\n\n/**\n * Returns a promise that will be resolved with the duration of given video in seconds.\n * @param {Integer} full_seconds - The number of seconds we want to format as HH:MM:SS.\n * @returns {String} - Seconds formatted as an HH:MM:SS string.\n */\nexport function formatDuration(full_seconds) {\n  return new Date(1000 * full_seconds).toISOString().substring(11, 19);\n}\n\nexport function formatLastUpdated(epoch) {\n  return new Date(epoch).toLocaleString('en-US', {\n    day: 'numeric',\n    hour: '2-digit',\n    hour12: true,\n    minute: '2-digit',\n    month: 'short',\n    year: 'numeric',\n  });\n}\n\n/**\n * Returns a promise that will be resolved with the duration of given video in seconds.\n * @param {String} input - Stream or URL or path to file to be used as input for `ffprobe`.\n * @returns {Promise<Float>} - Promise that will be resolved with given video duration in seconds.\n */\nexport async function getDuration(input) {\n  try {\n    const { stdout } = await executeProbe(input);\n    const matched = stdout.match(/duration=\"?(\\d*\\.\\d*)\"?/);\n    if (matched && matched[1]) return parseFloat(matched[1]);\n    throw new Error('No duration found!');\n  } catch (e) {\n    console.error(e);\n    return 0;\n  }\n}\n\nexport function getLastUpdated(input) {\n  try {\n    return fs.statSync(input).mtimeMs || -1;\n  } catch (e) {\n    console.error(e);\n    return -1;\n  }\n}\n\n/**\n * @param {String} path - The URL path that will be the base of the generated URL.\n * @param {String} query - The existing query string that we'll use as a base to update.\n * @param {String} attr - The query string attribute we want to add / update.\n * @param {String} value - The value we want to give to the query string attribute.\n * @returns {String} - The newly-built URL path with query string.\n */\nexport function generateUrl(path, query, attr, value) {\n  const new_query = cloneDeep(query);\n  new_query[attr] = value;\n  return `/f/${strip(path)}${toQuery(new_query)}`;\n}\n\nexport function toQuery(query) {\n  if (isEmpty(query)) return '';\n  return `?${qs.stringify(query)}`;\n}\n\n/**\n * Sorts the provided array by putting folders on top, followed by files with non-alphanumeric characters.\n * If `sort_by_duration` is true, then the remaining files will be sorted by duration (applies to videos).\n * If false, then do a standard alphabetical sort.\n * @param {Array} arr - The array of files we want to sort.\n * @param {Boolean} sort_by_duration - Whether we're sorting by duration or not.\n * @returns {Array} - The sorted array that will be used to build the front-end.\n */\nexport function sortEntries(arr, sort_param) {\n  const iteratees = [\n    (i) => i.type === 'folder',\n    (i) => i.name.match(/^\\W+/) === null,\n    (i) => i.name.toLowerCase(),\n  ];\n  const orders = ['desc', 'asc', 'asc'];\n\n  switch(sort_param) {\n    case 'duration':\n      iteratees.splice(1, 0, (i) => i.raw_duration || 0);\n      orders.splice(1, 0, 'desc');\n      break;\n    case 'last_updated':\n      iteratees.splice(1, 0, (i) => i.raw_last_updated || -1);\n      orders.splice(1, 0, 'desc');\n      break;\n    default:\n      break;\n  }\n\n  return orderBy(arr, iteratees, orders);\n}\n\nexport function strip(route) {\n  const cleaned = route.replace(/\\/+/g, '/');\n  if (cleaned.startsWith('/')) return cleaned.substring(1);\n  return cleaned;\n}\n\nexport function toBreadcrumbs(path, query) {\n  const cleaned = path.split('/').filter((part) => !!part);\n  const parts = without(cleaned, 'f');\n  return [\n    {\n      label: 'Root',\n      skip_link: atRoot(path),\n      url: `/f${toQuery(query)}`,\n    },\n    ...parts.map((label, index) => {\n      const url = `/f/${parts.slice(0, index + 1).join('/')}${toQuery(query)}`;\n      return { label, url, skip_link: index === parts.length - 1 };\n    }),\n  ]\n}\n\nexport default {\n  atRoot,\n  formatDuration,\n  formatLastUpdated,\n  generateUrl,\n  getLastUpdated,\n  getDuration,\n  toQuery,\n  sortEntries,\n  strip,\n  toBreadcrumbs,\n};\n", "export default {\n  method: '*',\n  path: '/{any*}',\n  handler: function (_request, h) {\n    return h.view('404').code(404);\n  },\n};\n"],
  "mappings": "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",
  "names": ["fs", "path", "Hapi", "inert", "vision", "handlebars", "qs", "dotenv", "config_default", "path", "assets_default", "request", "h", "fs", "path", "fileTypeFromFile", "qs", "fs", "execa", "ffprobe", "cloneDeep", "isEmpty", "orderBy", "without", "qs", "atRoot", "path", "executeProbe", "input", "params", "formatDuration", "full_seconds", "formatLastUpdated", "epoch", "getDuration", "stdout", "matched", "getLastUpdated", "generateUrl", "query", "attr", "value", "new_query", "strip", "toQuery", "sortEntries", "arr", "sort_param", "iteratees", "i", "orders", "route", "cleaned", "toBreadcrumbs", "part", "parts", "label", "index", "url", "valid_views", "valid_sorts", "handleDirectory", "request", "h", "root_path", "local_path", "req_path", "view_param", "sort_param", "files", "fs", "parsed", "i", "f", "dir", "encoded_name", "encoded_local_path", "path", "encoded_root_path", "file_path", "last_updated", "getLastUpdated", "output", "formatLastUpdated", "strip", "toQuery", "determined_type", "fileTypeFromFile", "dur", "getDuration", "formatDuration", "thumbnail_file", "thumbnail_path", "line", "sortEntries", "query", "qs", "breadcrumbs", "toBreadcrumbs", "atRoot", "generateUrl", "handleFile", "files_default", "stats", "not_found_default", "_request", "h", "init", "root_path", "config_default", "fs", "handlebars", "arg1", "arg2", "options", "__dirname", "path", "server", "Hapi", "query", "qs", "inert", "vision", "request", "h", "files_default", "assets_default", "not_found_default", "err"]
}
